#!/system/bin/sh

scripts=`realpath $0`
scripts_dir=`dirname ${scripts}`
. /data/clash/clash.config

start_clash() {
    nohup /data/adb/magisk/busybox crond -c /data/clash/run > /dev/null 2>&1 &
    touch /data/clash/run/cmdRunning && rm -rf /data/clash/run/DEBUG*

    if [ "${config_online}" == "true" ] ; then
        if ! [ "$(head -1 /data/clash/run/root)" == "disable" ] ; then
            if ! (${scripts_dir}/clash.tool -o) ; then
                echo $date_log"err: failed to download config, make sure you are connected to the internet." >> ${CFM_logs_file}
                exit 1
            fi
        fi
    fi

    echo -n "" > ${CFM_logs_file} && echo "${date_day}" >> ${CFM_logs_file}
    echo "Clash for Magisk v1.13.0" >> ${CFM_logs_file}

    chmod 0755 /data/clash/core/lib/*

    err="failed to replace Core."
    if [ "${use_premium}" == "true" ]; then
        cp -f ${Clash_Premium} /data/clash/core/clash \
        && echo "" || echo $date_log"err: ${err}" >> ${CFM_logs_file}
    else
        cp -f ${Clash_Meta} /data/clash/core/clash \
        && echo "" || echo $date_log"err: ${err}" >> ${CFM_logs_file}
    fi

    if [ -f "/data/adb/modules/ClashForMagisk/disable" ]; then
        echo ""
    else
        ${Clash_bin_path} -v >> ${CFM_logs_file}
    fi

    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━" >> ${CFM_logs_file}

    if [ "${ipv6}" == "false" ] ; then
        echo 1 > /proc/sys/net/ipv6/conf/lo/disable_ipv6
        echo 1 > /proc/sys/net/ipv6/conf/default/disable_ipv6

        echo 0 > /proc/sys/net/ipv6/conf/all/accept_ra
        echo 0 > /proc/sys/net/ipv6/conf/wlan0/accept_ra
        echo 1 > /proc/sys/net/ipv6/conf/all/disable_ipv6
        echo 1 > /proc/sys/net/ipv6/conf/wlan0/disable_ipv6
    else
        echo 0 > /proc/sys/net/ipv6/conf/lo/disable_ipv6
        echo 0 > /proc/sys/net/ipv6/conf/default/disable_ipv6

        echo 1 > /proc/sys/net/ipv6/conf/all/accept_ra
        echo 1 > /proc/sys/net/ipv6/conf/wlan0/accept_ra
        echo 0 > /proc/sys/net/ipv6/conf/all/disable_ipv6
        echo 0 > /proc/sys/net/ipv6/conf/wlan0/disable_ipv6
    fi

    if [ ! -d ${Clash_data_dir}/confs/config ] ; then
        if [ ! "${use_config}" == "false" ]; then
            echo $date_log"info: folder /confs/config tidak ditentukan." >> ${CFM_logs_file}
            echo $date_log"info: create folder /confs/config." >> ${CFM_logs_file}
            mkdir -p ${Clash_data_dir}/confs/config
        fi
    fi

    if [ "${use_premium}" == "true" ]; then
        if [ -f "${Clash_bin_path}" ] ; then
            echo $date_log"info: Using Clash Premium." >> ${CFM_logs_file}
        else
            echo $date_log"err: Core not detected ${Clash_bin_path}" >> ${CFM_logs_file}
            exit 1
        fi
    else
        if [ -f "${Clash_bin_path}" ] ; then
            echo $date_log"info: Using Clash Meta." >> ${CFM_logs_file}
        else
            echo $date_log"err: Core not detected ${Clash_bin_path}" >> ${CFM_logs_file}
            exit 1
        fi
    fi

    echo $date_log"info: Config ${Clash_config_file}." >> ${CFM_logs_file}

    local PID=`cat ${Clash_pid_file} 2> /dev/null`
    if (cat /proc/${PID}/cmdline | grep -q ${Clash_bin_name}) ; then
        ${scripts_dir}/clash.iptables -s
        exit 1
    else
        echo $date_log"info: Executed Clash service." >> ${CFM_logs_file}
    fi

    echo $date_log"info: Status ipv6: ${ipv6}" >> ${CFM_logs_file}

    if [ "${Clash_tun_status}" == "true" ] ; then
        mkdir -p /dev/net
        [ ! -L /dev/net/tun ] && ln -sf /dev/tun /dev/net/tun
        echo $date_log"info: using [tun] mode, stack: [${Clash_stack_mode}] " >> ${CFM_logs_file}
        echo $date_log"info: create /dev/net/tun." >> ${CFM_logs_file}
        sed -i 's/listen:.*/listen: ""/' /data/clash/template
        sed -i 's/tproxy-port:.*/tproxy-port: 0/' /data/clash/template
    else
        echo $date_log"info: using [tproxy] mode." >> ${CFM_logs_file}
        sed -i 's/listen:.*/listen: 0.0.0.0:1053/' /data/clash/template
        sed -i 's/tproxy-port:.*/tproxy-port: 9898/' /data/clash/template
    fi

    if [ -f "${temporary_config_file}" ] ; then
        rm -rf ${temporary_config_file}
        echo $date_log"info: refresh ${temporary_config_file}." >> ${CFM_logs_file}
    fi

    if [ -f "${Clash_dns}" ] ; then
        if [ -f "${Clash_config_file}" ] ; then
           cp -f ${Clash_dns} ${temporary_config_file}.swp && echo "\n" >> ${temporary_config_file}.swp
           sed -n -E '/^proxies:$/,$p' ${Clash_config_file} >> ${temporary_config_file}.swp
           sed -i '/^[  ]*$/d' ${temporary_config_file}.swp
        else
           echo $date_log"err: files ${Clash_config_file} not found !!!" >> ${CFM_logs_file}
           exit 1
        fi
    else
        echo $date_log"err: files ${Clash_dns} not found !!!" >> ${CFM_logs_file}
        exit 1
    fi

    mv ${temporary_config_file}.swp ${temporary_config_file} \
    && echo $date_log"info: merge files ${Clash_config_file} & template Succes." >> ${CFM_logs_file} || echo $date_log"err: merge files ${Clash_config_file} & template failed !!!" >> ${CFM_logs_file}

    if [ ! -f "${temporary_config_file}" ] ; then
       echo $date_log"err: ${temporary_config_file} not found !!!." >> ${CFM_logs_file}
       exit 1
    fi

    if [ -f "${Clash_bin_path}" ] ; then
        chown ${Clash_user_group} ${Clash_bin_path}
        chown ${Clash_user_group} ${temporary_config_file}
        chmod 6755 ${Clash_bin_path}
        chmod 0644 ${temporary_config_file}
        setcap 'cap_net_admin,cap_net_raw+ep' ${Clash_bin_path}

        /data/adb/magisk/busybox crontab -c /data/clash/run -r
        touch /data/clash/run/root
        chmod 0600 /data/clash/run/root

        if [ ! "${schedule_update_core}" == "false" ]; then
            echo "${schedule_update_core} ${scripts_dir}/clash.tool -e" > ${Clash_run_path}/root \
            && echo $date_log"info: schedule Update Core (${schedule_update_core})" >> ${CFM_logs_file}
        else
            echo $date_log"info: schedule Update Core not active." >> ${CFM_logs_file}
        fi

        if [ ! "${update_interval}" == "false" ]; then
            echo "${update_interval} ${scripts_dir}/clash.tool -u" >> ${Clash_run_path}/root \
            && echo $date_log"info: schedule Update GeoX & SubScription (${update_interval})." >> ${CFM_logs_file}
            echo $date_log"info: Geo status: [${auto_updateGeoX}] | Subs status: (${auto_updateSubcript})." >> ${CFM_logs_file}
        else
            echo $date_log"info: schedule Update GeoX & Subs not active." >> ${CFM_logs_file}
        fi

        if [ ! "${static_dns}" == "false" ]; then
            echo "*/1 * * * * ${scripts_dir}/clash.tool -k" >> ${Clash_run_path}/root \
            && echo $date_log"warn: set static dns: ${static_dns}." >> ${CFM_logs_file}
            echo $date_log"info: static dns: ${static_dns}." >> ${CFM_logs_file}
        else
            echo $date_log"info: static dns: ${static_dns}." >> ${CFM_logs_file}
        fi

        sed -i '/^[  ]*$/d' ${CFM_logs_file}
        if [ "${filter_local}" == "true" ] && [ "${Clash_tun_status}" == "false" ] ; then
            clash_cron="${scripts_dir}/clash.tool -a"
            echo "*/1 * * * * ${clash_cron}" >> ${Clash_run_path}/root && echo $date_log"warn: local ip auto bypass is turned on." >> ${CFM_logs_file}
        else
            echo $date_log"info: local ip auto bypass is turned off." >> ${CFM_logs_file}
        fi
        ${scripts_dir}/upSub.sh -s
        echo "0 * * * * ${scripts_dir}/upSub.sh -s " >> ${Clash_run_path}/root \
        && echo $date_log"info: 自动更新套餐流量已开启." >> ${CFM_logs_file}
    else
        echo $date_log"err: Clash kernel ${Clash_bin_path} not found !!!." >> ${CFM_logs_file}
        exit 1
    fi

    if [ -f ${temporary_config_file} ] ; then
        ${Clash_bin_path} -t -d ${Clash_data_dir} -f ${temporary_config_file} > ${Clash_run_path}/config.logs \
        && echo "" || echo $date_log"err: ${Clash_config_file} failed" >> ${CFM_logs_file}
        if (${Clash_bin_path} -v > /dev/null 2>&1) ; then
            if (${Clash_bin_path} -t -d ${Clash_data_dir} -f ${temporary_config_file} > /dev/null 2>&1) ; then
                ulimit -SHn 1000000
                nohup /data/adb/magisk/busybox setuidgid 0:3005 ${Clash_bin_path} -d ${Clash_data_dir} -f ${temporary_config_file} > /dev/null  2>&1 & # /data/clash/run/DEBUG.`date`.log 2>&1 &
                echo -n $! > ${Clash_pid_file}
                echo $date_log"info: tcp-concurrent:${Clash_tcp_concurrent}" >> ${CFM_logs_file}

                if [ "${Cgroup_memory}" == "true" ] ; then
                    if ! (${scripts_dir}/clash.tool -l) ; then
                        echo -n ""
                    fi
                else
                    echo $date_log"info: Cgroup | status: ${Cgroup_memory}" >> ${CFM_logs_file}
                fi
                sleep 0.5
#                echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━" >> ${CFM_logs_file}
                sed -i s/.*msg=// ${Clash_run_path}/config.logs
                sed -i 's/configuration file*//' /data/clash/run/config.logs
                while read p; do
                    echo ${date_log}"info:" "$p" >> ${CFM_logs_file}
                done <${Clash_run_path}/config.logs
#                echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━" >> ${CFM_logs_file}
            else
#                echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━" >> ${CFM_logs_file}
                sed -i s/.*msg=// ${Clash_run_path}/config.logs
#                sed -i 's/fatal msg=*//' /data/clash/run/config.logs
                sed -i 's/configuration file*//' /data/clash/run/config.logs
                while read p; do
                    echo ${date_log}"err:" "$p" >> ${CFM_logs_file}
                done <${Clash_run_path}/config.logs
#                echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━" >> ${CFM_logs_file}
                if [ "${use_config}" == "false" ]; then
                    mv ${temporary_config_file} ${Clash_data_dir}/config.yaml
                else
                    mv ${temporary_config_file} ${Clash_data_dir}/confs/config/${use_config}
                fi
                echo $date_log"err: recheck ${Clash Config_file} & template." >> ${CFM_logs_file}
                exit 1
            fi
        else
            echo $date_log"err: Core CFM error/broken/not supported ">> ${CFM_logs_file}
            exit 1
        fi
    else
        echo $date_log"err: ${Clash_config_file} not found." >> ${CFM_logs_file}
        exit 1
    fi

    if [ "${port_detect}" == "true" ]; then
        if ! (${scripts_dir}/clash.tool -p) ; then
            exit 0
        fi
    else
        echo $date_log"警告：已跳过端口检查 可能出现整机断网或无法代理流量等故障" >> ${CFM_logs_file}
    fi
}

stop_clash() {
    if (ps -ef > /dev/null 2>&1) ; then
        clashkill=$(ps -ef | grep root | grep "clash -d /data/clash" | /data/adb/magisk/busybox awk '{ print $2 }' | sort -u)
        for clashkil in ${clashkill[*]} ; do
           if [ "${Clash_tun_status}" == "true" ] ; then
              kill -9 ${clashkil}
           else
              kill -15 ${clashkil}
           fi
        done
    else
        echo $date_log"警告：出现异常，已强制停止clash内核" >> ${CFM_logs_file}
        kill -9 `cat ${Clash_pid_file}`
    fi

    cronkill=$(ps -ef | grep root | grep "crond -c /data/clash/" | /data/adb/magisk/busybox awk '{ print $2 }' | sort -u)
    for cronkil in ${cronkill[*]} ; do
       kill -15 ${cronkil}
    done

    local PIDs=`cat ${Clash_pid_file} 2> /dev/null`
    if (cat /proc/${PIDs}/cmdline | grep -q ${Clash_bin_name}) ; then
        echo $date_log"clash关闭失败" >> ${CFM_logs_file}
        ${scripts_dir}/clash.iptables -s
        exit 1
    else
        echo $date_log"warn: Clash已停止运行" >> ${CFM_logs_file}
    fi

    if [ -f /data/clash/run/appuid.list ]; then
        rm -rf /data/clash/run/appuid.list
    fi

    rm -rf /data/clash/run/clash.pid

    rm -rf ${Clash_run_path}/root \
    && echo $date_log"info: 自动更新流量信息已关闭." >> ${CFM_logs_file}
}

while getopts ":sk" signal ; do
    case ${signal} in
        s)
            stop_clash &> /data/clash/run/service.log
            sleep 0.5
            start_clash &>> /data/clash/run/service.log
            ;;
        k)
            stop_clash &>> /data/clash/run/service.log
            ;;
        ?)
            echo ""
            ;;
    esac
done
