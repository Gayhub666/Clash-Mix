#!/system/xbin/sh
 

JB=$(basename $0)
vijw=$(date +%Y%m%d%H%M%S)
usage() 
{
cat <<EOF
用法：$JB是通过xposed edge的将动作转为intent来达到执行xposed edge同样的动作的功能，所以需要安装xposed edge才行。收藏夹采用的是转化为shell命令的编码数据进行广播执行，所以需要打开偏好中"允许通过广播执行"才能使用收藏夹功能。

--help 查看用法

功能类型 [ -toast | -朗读文本 | -输入文本 | -收藏夹 | -通知 | -启动应用/停止应用 | -播放音乐 | -tasker任务 | -翻译  | -网址 ] "文字 | 文件"
   可以通过$JB -类型 "文本" 来执行
    
    -toast 文字  #用xposed edge 的"toast提示" 文本。
    
    -朗读文本|-输入文本|-通知  同toast一样
    
   启动应用和结束应用由于匹配的时候会出现匹配到多个程序，例如匹配QQ时也能将QQ管家或其他的带有QQ字样程序名称，所以启动和结束时就需要在后面多加一个数字用来判断是第几个程序,
  $JB -刷新应用列表 
   由于启动/停止应用需要匹配应用包名，所以是将sqlite3获取的包名/程序名储存在"/sdcard/Android/应用列表"中，好处是启动/停止不需要root，但是刷新时需要，如果应用列表中没有该应用会自动刷新。
   由于应用程序名称有可能一样，所以启动应用为完全应用名，减少重复匹配，但还是有可能存在同名应用，所以启动时在尾部添加数字指定启动匹配到的第某个应用。
   例如：$JB -启动 QQ 2
   就会启动匹配到的第二个程序。默认不写是1
   匹配方式默认采用完全匹配
   -启动* QQ 为模糊匹配QQ，所有包含QQ字样的应用都会匹配，不区分大小写
   -停止 同上
   
 重要！重要！重要！
   启动和结束应用由于我没有找到能用shell命令直接获取所有应用程序列表的程序名称和包名，所以我用的是shell命令sqlite3用来获取数据库的脚本,获取的是酷安的应用程序列表的数据库用来匹配的，所以需要安装有酷安和sqlite3。
   
 $JB -收藏夹 "收藏夹中的名称"
   收藏夹编辑的名称不能为英文符号。
   
 百度翻译api
   例如：$JB -翻译:zh Hello
   输出中文"你好" 
   翻译中加 -T toast提示翻译结果。
   例如: $JB -T -翻译:zh Hello
  -翻译:语种 获取语种列表。
   设置的百度翻译api的appid和密钥保存在/sdcard/Android/appid中。
   设置appid和密钥时可以直接写入文件"/sdcard/Android/appid"中第一行为appid，第二行为密钥
   也可以用命令写入
   例如：$JB -翻译:appid $vijw
   添加上appid：$vijw
   密钥也是一样
   
   -网址 http://**   打开网址
   
EOF
}
 

if [ "$(echo "$1" |sed -r 's/-H|-h|-help|--help|-帮助|帮助/H/')" = "H" ] || [ $# -eq 0 ] ; then

usage
 exit 0
 
fi


data="am broadcast -a com.jozein.xedgepro.PERFORM -e data "

intent="am start \"intent:#Intent;launchFlags=0x18000000;component=com.jozein.xedgepro/.ui.ActivityPerformAction;"

http="am start \"intent:#Intent;launchFlags=0x18000000;component=com.jozein.xedgepro/.ui.ActivityPerformAction;i.__0=100;i.__1=1;i.__2=0;S.__3=am%20start%20%22intent%3A"

view="%23Intent%3Baction%3Dandroid.intent.action.VIEW%3Bend%22;end\""

I="i.__0="

I1="i.__1="

I2="i.__2="

I3="i.__3="

S1="S.__1="

S2="S.__2="


fg=";"

end=";end\""


qdyy="47"   #启动应用

jvyy="77"   #结束应用

boym="93"   #播放音频

auru="108"  #注入文本

tsai="109"  #通知

yuyy="110"  #语音TTS

toast="111"

tyai="534402030203020302"  #停止播放

if [[ $# = 1 ]]; then
gl=$1
elif [[ $# = 2 ]]; then
gl=$2
elif [[ $# = 3 ]]; then
gl=$3
elif [[ $# = 4 ]]; then
gl=$4
elif [[ $# = 5 ]]; then
gl=$5
elif [[ $# = 6 ]]; then
gl=$6
elif [[ $# = 7 ]]; then
gl=$7
elif [[ $# = 8 ]]; then
gl=$8
fi


px=$(echo $gl |awk -F\. '{ gsub(/png|db|svg/,"∴"); print $NF}')


if [ -f "$gl" ] && [ "$px" != "∴" ] ; then

gl=$(awk '{print $0}' "$gl" |sed 's/\\-/-/g')
fi

tzjw=$(echo "$1" |sed -r 's/-刷新应用列表|-更新应用|-更新应用列表/-刷新应用/;s/-停止播放|-歌曲停止|-停止音乐|-停止歌曲/-停止播放音乐/')

if [ "$#" -lt "2" ] && [ "$(echo $tzjw |sed -r 's/-刷新应用|-停止播放音乐/∵∵/')" != "∵∵" ] ; then
  
name=$(awk '{print $0}')
  
  if [ "$(echo $name |awk '{print length($0)}')" -gt "0" ] ; then
   
  gl="$name"
     
  else
    
  echo "错误退出"
  ks=$($JB -toast 错误退出)
  usage

  exit
  fi 

fi
  
utf8=$(echo $(echo "$gl" |od -An -tx1 |tr ' ' % |tr '[a-z]' "[A-Z]" ) |sed -r 's/ |%0A$//g')


if [ "$(echo "$1" |sed -r 's/-toast提示|-吐司|-吐丝|-提示|-提醒/-toast/')" = "-toast" ]; then

ks=$(echo "$intent$I$toast$fg$S1$utf8$end" |sh)

exit
fi


if [ "$(echo "$1" |sed -r 's/-输入文本|-输入文字|-文字|-输入|-注入文本|-输|-text/-注入/' )" = "-注入" ] ; then

ks=$(echo "$intent$I$auru$fg$S1$utf8$end" |sh)

exit
fi


if [ "$(echo "$1" |sed -r 's/-朗读文本|朗读文字|-语音朗读|-朗读|-读|-tts|-TTS/-语音/' )" = "-语音" ] ; then

ks=$(echo "$intent$I$yuyy$fg$S1$utf8$end" |sh)

exit
fi


yy="$(echo "$1" |sed -r 's/-启动应用|-启动|-app|-APP|-程序|-应用/启动/' |sed -r 's/-结束应用|-停止应用|-结束程序|-终止|-结束|-停止/结束/' |sed 's/\*$//')"

if [ "$yy" = "启动" ] || [ "$yy" = "结束" ] ; then

 if [ $# = 3 ] && [ "$(echo "$gl" |sed -r 's/^[0-9]+$/∞/' )" = "∞" ] ; then
 vv=$gl
 gl=$2
 else
 vv=1
 fi
  
    if [ -f "/sdcard/Android/应用列表" ] ; then
     Ls=$(grep -i "$gl" /sdcard/Android/应用列表 |grep -n "^")
     if [ "$(echo "$1" |grep -o "\*$" )" = "*" ]; then
     yyl1=$(grep -i "$gl" /sdcard/Android/应用列表) 
     else
     yyl1=$(echo "awk '/\|${gl}\||^${gl}\|/{print \$0}' /sdcard/Android/应用列表" |sh ) 
     fi
     
    yyl=$(echo "$yyl1" |sed -n "${vv}p" |sed 's/\\//' )
    
    yyls=$(echo "$yyl" |awk -F"\|" '{print $1}' )
    echo "$yy第$vv个应用：$yyl"
    echo "
    类似匹配\"$2\"应用 列表:
$Ls"
    
      if [ ! "$yyls" ] ; then
       
      ks=$($JB -toast "没有安装\"$2\"，尝试更新应用列表")
      ks=$($JB -刷新应用列表)
      kk="已自动刷新应用列表，发现类似
$Ls"
      ks=$($JB -toast "$kk")
      exit
      fi
      
       if [ "$yy" = "启动" ] ; then
       ks=$(echo "$intent$I$qdyy$fg$S1$yyls$end" |sh)
       elif [ "$yy" = "结束" ] ; then
       ks=$(echo "$intent$I$jvyy$fg$S1$yyls$end" |sh)
       fi
        
    ks=$($JB -toast "$yy应用：$(echo "$yyl" |sed 's/\|/\n/g' |sed '1d' |grep -i "$gl" |sed -n '1p' )")
    
      if [ "$(stat /sdcard/Android/应用列表 |grep Modify |grep -oE "\-[0-9]+\-" |grep -oE "[0-9]+")" != "$(date +"%m")" ]; then
      ks=$($JB -刷新应用列表)
      fi
    
    exit
    else
    
    ks=$($JB -toast "刷新应用列表")
    ks=$($JB -刷新应用列表)
    $JB $@
    exit
    fi

fi


if [ "$(echo "$1" |sed -r 's/-notific/-通知/' )" = "-通知" ] ; then

ks=$(echo "$intent$I$tsai$fg${I1}-8$fg$S2$utf8$end" |sh)

exit
fi


if [ "$(echo "$1" |sed -r 's/-SCJ|-SC|-SO|-so|-收藏夹|-收藏|-收|-夹/-SoCaJa/' )" = "-SoCaJa" ] ; then

SC=$(awk '{print $0}' /data/user_de/0/com.jozein.xedgepro/prefs/collection |sed -r 's/^[0-9A-Z]{8} [0-9A-Z]{1,2} /▶⏎╬⏎&/' |paste -d "☃" -s |sed -r 's/☃▶⏎╬⏎[0-9A-Z]{8} [0-9A-Z]{1,2} /\n\n&/g' |grep " $(echo "echo \"$gl\" $(echo $(echo "$(echo "$gl" |grep -oE "[^!-~]+" )" |sed 's/"/\\"/g' |awk '{print "|sed \"s/" $0 "/" "$(echo \""$0 "\" \|od -An -tx1 \|tr \" \" % \|tr \"\[a-z\]\" \"\[A-Z\]\" \|xargs \|sed -r \"s/ |%0A$//g\" )/g\" " }' ))" |sh) " |sed -n '1p' |sed -r 's/^☃▶⏎╬⏎[0-9A-Z]{8} //' |sed 's/☃/\n/g' ) 
SCJ=$(echo "$SC" |od -An -tx1 |tr ' ' % |tr '[a-z]' "[A-Z]" |xargs |sed -r 's/ |%0A$//g' |sed 's/%/\n/g' |sed -r 's/^[0-9A-Z]/& /' |awk '{print $2 $1}' |xargs |sed 's/ //g')

  if [ "$SCJ" ] ; then
  
  if [ "$2" = "-T" ]; then
  
  tq=$(echo "$SC" |sed 's/\;end[ ]*/\;end\n/' |grep "\#Intent\;" |sed -n '$p' |sed -r 's/^[0-9A-Z]{8,} //' |sed -r 's/^[0-9A-Z]{1,4} //' |sed -r 's/^[0-9A-Z]{1,4} //' |sed -r 's/^[0-9A-Z]{1,4} //' |sed -r 's/^[0-9A-Z]{1,4} //' |sed -r 's/^[0-9A-Z]{1,4} |am start "intent://' |sed 's/^/am start "intent:/' |sed 's/$/"/' |sed -r 's/launchFlags=0x[0-9]{4,}\;//')
  /data/data/com.termux/files/usr/bin/termux-clipboard-set "$tq"
kk="Intent已复制:$gl
$tq"
ks=$($JB -toast "$kk")
  
  exit
  fi
  
  ks=$($data$SCJ)
  echo "执行收藏夹任务\"$gl\""
  else
  
  ks=$($JB -toast "  收藏夹没有\"$gl\"
请检查\"$gl\"是否正确" )
  
  fi
  
exit
fi


if [ "$1" = "-网址" ]; then
ks=$(echo "$http$gl$view" |sh)
exit 1
fi


AFY=$(echo "$@" |sed 's/ -/\n-/g' |sed 's/ /\n/' |grep -E "^-fy|^-FY|^-翻译" )
if [ "$(echo "$AFY" |sed -r 's/:|：/\n/g' |sed -n '1p' |sed -r 's/^-fy|^-翻译|^-译|^-FY/FY/' )" = "FY" ] ; then

Q=$(echo "$gl" |sed -r 's/[[:space:]]{2,}/ ▶ /g' |sed -r 's/[a-z]+[A-Z]|\.[a-zA-Z]/&●/g' |sed -r 's/[A-Z]●/ &/g;s/[[:punct:]]/ &/g' |sed 's/</& /g' |sed -r 's/[a-zA-Z]●/ &/g' |sed 's/●//g' )

Hs=$(echo "$Q" |grep -c "^" )
Qi=1
Ho=100
while [ "$Qi" -le "$Hs" ]; do

Qg=$(echo "$Q" |sed -n "${Qi},${Ho}p")
let "Ho+=100"
let "Qi+=100"

q=`echo "$Qg" |od -An -tx1 |tr ' ' % |tr '[a-z]' "[A-Z]" |xargs |sed -r 's/ |%0A$//g'`

from=auto
to=$(echo "$AFY" |sed -r 's/：|:/\n/g' |sed -n '$p')

if [ "$to" = "语种" ]; then
 
curl -s https://fanyi.baidu.com/translate |grep "': '" |sed '1s/^/     ,/' |grep "   ,   " |sed -r "s/[ ]*,[ ]*|'/ /g"
 
exit
fi

if [ -f "/sdcard/Android/appid" ]; then

 if [ "$(sed -n '1p' /sdcard/Android/appid)" ]; then

 appid=$(sed -n '1p' /sdcard/Android/appid)

 else

 echo "未设置百度翻译appid。
 $JB -翻译:appid \"$vijw\"
 appid和密钥需要在百度翻译开放平台http://api.fanyi.baidu.com 免费注册为开发者，在管理控制台查看。"
 fi

    if [ "$(sed -n '2p' /sdcard/Android/appid)" ]; then
    
    MY=$(sed -n '2p' /sdcard/Android/appid)

    else

    echo "未设置百度翻译api密钥。
    $JB -翻译:密钥 \"*******\"
 appid和密钥需要在百度翻译开放平台http://api.fanyi.baidu.com 免费注册为开发者，在管理控制台查看。"
    fi
   
   if [[ "$to" = "appid" || "$to" = "密钥" ]] && [[ "$gl" = "是" ]]; then
   
   https="http://api.fanyi.baidu.com"
   ks=$(echo "$http$https$view" |sh)
   
   exit 1
   else
   
    if [[ "$to" = "appid" || "$to" = "密钥" ]]; then
   echo "是否打开百度api网址
输入\"是\"用浏览器打开百度翻译api地址"
    fi
   fi
else

echo "未设置百度翻译api，需要设置appid和密钥。
 $JB -翻译:appid/密钥 \"*******\"
 appid和密钥需要在百度翻译开放平台http://api.fanyi.baidu.com 免费注册为开发者，在管理控制台查看。"
   if [[ "$to" = "appid" || "$to" = "密钥" ]] && [[ "$gl" = "是" ]]; then
   
   https="http://api.fanyi.baidu.com"
   ks=$(echo "$http$https$view" |sh)
   exit 1
   else
   
    if [[ "$to" = "appid" || "$to" = "密钥" ]]; then
    
   echo "是否打开百度api网址
输入\"是\"用浏览器打开百度翻译api地址"
    fi
   
   fi
   

fi


if [ "$to" = "appid" ] || [ "$to" = "密钥" ]; then
 if [ ! -f "/sdcard/Android/appid" ]; then
 echo "
" >/sdcard/Android/appid
 fi
 
   if [ "$#" = 2 ] && [ $to = appid ]; then
   
   sed -i "1c $gl" /sdcard/Android/appid
   echo "已添加appid:$gl"
   
   else
    
    if [ "$to" = "appid" ]; then
    
    echo "$to为：$(sed -n '1p' /sdcard/Android/appid)"
    echo "请输入$to"
    fi
   fi
 
   if [ "$#" = 2 ] && [ "$to" = 密钥 ]; then
   
   sed -i "2c $gl" /sdcard/Android/appid
   echo "已添加密钥：$gl"

   else
    
    if [ "$to" = "密钥" ]; then
     
    echo "$to为：$(sed -n '2p' /sdcard/Android/appid)"
    echo "请输入$to"
    fi
   fi
   
exit
fi

salt=$(date +"%s")
md5=$(echo -n "$appid$Qg$salt$MY" |md5sum -b)

fy=$(curl -s -H "Content-Type: application/x-www-form-urlencoded" -X POST -d "q=$q&from=$from&to=$to&appid=$appid&salt=$salt&sign=$md5" "https://fanyi-api.baidu.com/api/trans/vip/translate" |sed -r  's/\[{"|"},{"/\n/g' |sed 's/","/\n/g' |grep -E "^dst\":\"|^src\":\"|error_code\":\"" |sed '$s/"}\]}//;s/\\\\/↺/g' )

if [ "$(echo "$fy" |grep -o "^{\"error_code\"" |grep -o "error_code")" = "error_code" ]; then
echo "$fy" |sed 's/^{"error_code":"/  /' |sed 's/52000/	成功/g;s/52001/请求超时\n重试/g;s/52002/系统错误\n重试/g;s/52003/未授权用户\n检查您的 appid 是否正确，或者服务是否开通/g;s/54000/必填参数为空\n检查是否少传参数/g;s/54001/签名错误\n请检查您的签名生成方法/g;s/54003/访问频率受限\n请降低您的调用频率/g;s/54004/账户余额不足\n请前往管理控制台为账户充值/g;s/54005/长query请求频繁\n请降低长query的发送频率，3s后再试/g;s/58000/客户端IP非法\n检查个人资料里填写的 IP地址 是否正确\n可前往管理控制平台修改\nIP限制，IP可留空/g;s/58001/译文语言方向不支持\n检查译文语言是否在语言列表里/g;s/58002/服务当前已关闭\n请前往管理控制台开启服务/g;s/90107/认证未通过或未生效	请前往我的认证查看认证进度/g' 
exit 1
fi
if [ "$(echo " $1 $2 " |grep -o " -原文 " )" = " -原文 " ]; then

yw=$(echo "$fy" |sed 's/^src":"/原文:/;s/^dst":"/译文:/' |sed 's/\$/\\&/g' )
jg=$(echo "echo \"$yw\"" |sh |sed 's/▶/ /g;s/↺/\\/g' |sed '2,$s/^原文:/\n&/' |sed 's/\\\//\//g;s/\\u/\_/g')

else

yw=$(echo "$fy" |grep "^dst\":\"" |sed 's/^dst":"//' |sed -r 's/\$/\\&/g')
jg=$(echo "echo \"$yw\"" |sh |sed 's/▶/ /g;s/↺/\\/g' |sed 's/\\\//\//g')
fi

if [ "$(echo " $1 $2 $3 " |sed -r '1s/ -[a-zA-Z]{1,2} /\n&/' |grep -oE "^ -[A-Za-z]+ " )" = " -T " ]; then

ks=$($JB -toast "$jg")

else

echo "$jg"
fi

sleep 0.2
done
exit
fi


if [ "$tzjw" = "-停止播放音乐" ]; then

ks=$($data$tyai)
ks=$($JB -toast "停止播放音乐")
if [ -f "/data/data/com.termux/files/usr/bin/termux-notification-remove" ]; then
/data/data/com.termux/files/usr/bin/termux-notification-remove 16
fi
echo $(echo $(awk '{print $0}' /sdcard/Android/音乐) |awk '{print $1+1}') >/sdcard/Android/音乐

exit
fi


if [ "$(echo "$1" |sed -r 's/-播放音乐|-播放音频|-音乐|-播放歌曲|-歌曲|-Music|-MUSIC/-music/' )" = "-music" ] ; then

Content="content://media/external/audio/media/"
Stream="3"
dx="0"
gl=$(echo "$gl" |sed -r 's/\/sdcard\/|\/data\/media\/0\//\/storage\/emulated\/0\//')
GQ=$(content query --uri content://media/external/audio/media |grep "$gl" |grep -Ev ", duration=[0-9]{1,5}," |sed 's/, /\n/g' |grep -E "[0-9]+ _id=[0-9]+|^duration=[0-9]+|^title=|^artist=|^album=|^_data=" |paste -d "," -s |sed -r 's/[ ]*Row\: [0-9]+ /\n/g' |sed 's/ //g')
YL=$(echo $(awk '{print $0}' /sdcard/Android/音乐) |awk '{print $1+1}')
echo $YL >/sdcard/Android/音乐
SJ=$(echo "$(echo "$GQ" |shuf )")

if [ -d "$gl" ]; then
SG="$SJ
$SJ
$SJ
$SJ
$SJ
$SJ"
icon="library_music"
else
SG="$SJ"
icon="music_note"
fi

for G in $SG; do
if [ $(awk '{print $0}' /sdcard/Android/音乐) = $YL ]; then

ID=$(echo $G |awk -F"_id=" '{print $2}' |awk -F"," '{print $1}')
title=$(echo $G |awk -F"title=" '{print $2}' |awk -F"," '{print $1}')
duration=$(echo $G |awk -F"duration=" '{print $2}' |awk -F"," '{print ($1-500)/1000}')
artist=$(echo $G |awk -F"artist=" '{print $2}' |awk -F"," '{print $1}')
album=$(echo $G |awk -F"album=" '{print $2}' |awk -F"," '{print $1}')

if [ $ID ]; then

if [ -f "/data/data/com.termux/files/usr/bin/termux-notification" ]; then
/data/data/com.termux/files/usr/bin/termux-notification --priority high -i 16 --alert-once --action "$data$tyai & echo $(echo $(awk '{print $0}' /sdcard/Android/音乐) |awk '{print $1+1}') >/sdcard/Android/音乐 && /data/data/com.termux/files/usr/bin/termux-notification-remove 16" --icon "$icon" -t "歌曲:$title" -c "歌手:$artist    专辑:$album"
else
tz=$(echo $G |awk -F"_data=" '{print $2}' |awk -F"," '{print $1}')
ks=$(echo "$intent$I$tsai$fg${I1}-8$fg$S2$tz$end" |sh)
fi
ks=$($data$tyai)
ks=$(echo "$intent$I$boym$fg$S1$Content$ID$fg$I2$Stream$fg$I3$dx$end" |sh)
sleep "$duration"
fi

else
break
fi
done

ks=$(am start "intent:#Intent;component=com.jozein.xedgepro/.ui.ActivityPerformAction;i.__0=62;i.__1=3;i.__2=23;i.__3=100;i.__4=0;i.__5=1;S.__6=if%20%5B%20%22%24(dumpsys%20notification%20-noredact%20%7Cgrep%20%22icon%3D%22%20%7Cgrep%20%22termux.api%22%20%7Cgrep%20-o%20%22music%22)%22%20%3D%20%22music%22%20%5D%3B%20then%0A%2Fdata%2Fdata%2Fcom.termux%2Ffiles%2Fusr%2Fbin%2Ftermux-notification-remove%2016%0Afi;i.__7=1;end")

exit
fi


if [ "$(echo "$1" |sed -r 's/-utf8|-utf-8|-UTF8|-UTF-8|-utf/-UTF/' )" = "-UTF" ] ; then

echo "$utf8"

exit
fi



if [ "$(echo "$1" |sed -r 's/-tasker|-Tasker|-task|-TASK|-TASKER/-任务/' )" = "-任务" ] ; then

ks=$(am start "intent:task:${gl}#Intent;action=net.dinglisch.android.tasker.WIDICKYUM;component=net.dinglisch.android.taskerm/.IntentHandler;S.mcro=%3CTask%20sr%3D%22%22%3E%3Cid%3E-2%3C%2Fid%3E%3CImg%20sr%3D%22icn%22ve%3D%222%22%3E%3Cnme%3Emw_action_settings_overscan%3C%2Fnme%3E%3C%2FImg%3E%3Cnme%3E${utf8}%3C%2Fnme%3E%3Cpri%3E7%3C%2Fpri%3E%3Crty%3E2%3C%2Frty%3E%3CAction%20sr%3D%22act0%22ve%3D%227%22%3E%3CStr%20sr%3D%22arg0%22ve%3D%223%22%3E${utf8}%3C%2FStr%3E%3CInt%20sr%3D%22arg1%22val%3D%227%22%2F%3E%3CStr%20sr%3D%22arg2%22ve%3D%223%22%2F%3E%3CStr%20sr%3D%22arg3%22ve%3D%223%22%2F%3E%3CStr%20sr%3D%22arg4%22ve%3D%223%22%2F%3E%3CInt%20sr%3D%22arg5%22val%3D%221%22%2F%3E%3CInt%20sr%3D%22arg6%22%2F%3E%3CStr%20sr%3D%22arg7%22ve%3D%223%22%2F%3E%3CInt%20sr%3D%22arg8%22%2F%3E%3CInt%20sr%3D%22arg9%22%2F%3E%3Ccode%3E130%3C%2Fcode%3E%3C%2FAction%3E%3Ccdate%3E1629613404125%3C%2Fcdate%3E%3Cedate%3E1629613404125%3C%2Fedate%3E%3C%2FTask%3E;end")
echo "执行Tasker任务\"$gl\""

exit
fi


if [ "$tzjw" = "-刷新应用" ]; then

          
    if [ -f /system/bin/aapt ] || [ -f /system/xbin/aapt ];then
    
    aapt=aapt
    else
    
    if [ -f /data/data/com.termux/files/usr/bin/aapt ]; then
    
    aapt=/data/data/com.termux/files/usr/bin/aapt
    else
    
    ks=$($JB -toast "没有aapt工具，无法获取应用名称列表，尝试使用数据库工具sqlite3获取数据库列表")
    
      if [ ! -f "/data/data/com.coolapk.market/databases/com.coolapk.market.v7.db" ] ; then
          
  ks=$($JB -toast "无法获取应用列表数据库，没用安装coolapk应用")
  exit
  fi
          
    if [ "$(ls /system/bin/ /system/xbin/ |grep "sqlite3")" = "sqlite3" ] ; then
    
    sqlite3 /data/data/com.coolapk.market/databases/com.coolapk.market.v7.db "select * from app;" |awk -F"\|" '{print $2"\|"$3}' |grep -Ev "^\||\|$" |sed 's/$/\|/' >/sdcard/Android/应用列表
    ks=$($JB -toast "已更新应用列表")
    exit
    else
    
    ks=$($JB -toast "没有sqlite3，无法查看数据库获取应用列表")
    exit
    fi
    
    
    exit
    fi
    fi
    
    ks=$($JB -toast "开始更新应用列表")
    
list=$(pm list package |sed 's/^package://' |grep "\." )
if [ -f /sdcard/Android/应用列表 ]; then
list=$(echo "$list" |grep -vE "$(awk -F\| '/\|/{print $1}' /sdcard/Android/应用列表 |paste -d "|" -s)\|" )
else
ks=$($JB -toast "首次更新比较慢")
fi

for package in $list ; do

path="$(dumpsys package $package |grep " path: " |sed -r 's/^ *path: //')"
if [ "$path" ]; then

name=$($aapt dump badging $path |grep -E "application-label|application: label=" |awk -F\' '{print $2}' |sort -u |paste -d "|" -s )
echo "$package|$name|" >>/sdcard/Android/应用列表
else

echo "$package|" >>/sdcard/Android/应用列表
fi
done 

if [ ! -f "/data/data/com.coolapk.market/databases/com.coolapk.market.v7.db" ] ; then
          
  ks=$($JB -toast "无法获取应用列表数据库")
  exit
  fi
          
    if [ "$(ls /system/bin/ /system/xbin/ |grep "sqlite3")" = "sqlite3" ] ; then
    
    sqlite3 /data/data/com.coolapk.market/databases/com.coolapk.market.v7.db "select * from app;" |awk -F"\|" '{print $2"\|"$3}' |grep -Ev "^\||\|$" |sed 's/$/\|/' >>/sdcard/Android/应用列表
    sq=$(sort -r /sdcard/Android/应用列表 |uniq)
    echo "$sq" >/sdcard/Android/应用列表
    
    else
    
    ks=$($JB -toast "没有sqlite3，无法查看数据库获取应用列表")
    exit
    fi
    
    ks=$($JB -toast "已更新应用列表")
exit
fi


echo "用法错误：没有\"$1\"类型"
ks=$($JB -toast "用法错误：没有\"$1\"类型")
usage
exit 1